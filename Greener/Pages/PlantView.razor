@using Greener.DAL
@using Greener.Models

<tr class="row">
	<th class="PlantNameCell" rowspan="2"> <button @onclick=@ShowDetail>&dArr;</button>  @CurrPlant.Name </th>
		</tr>
			<tr>
				<td>
				<input type="date" 
				   
				   @bind="date">
				<button class="EdBttbn" @onclick="()=> HandleWater(CurrPlant)"> &#127783; </button>
				<button class="EdBttbn" @onclick="()=> HandleFeritilize(CurrPlant)"> &#9752; </button>
				<button class="EdBttbn" @onclick="()=> HandleCutting(CurrPlant)">&#9988; </button>
				</td>
			</tr>
		<td class="PlantDetail" colspan="2" hidden = "@IsShown">
			<div> Latin Name: @CurrPlant.LatinName
			</div>
			<div>
			Last watered:
				@if (CurrPlant.Watered.Count < 1)
				{ 
				}
				else
				{			
				@CurrPlant.Watered.Last().Substring(0,10)
				}
			</div>
			<div>
				Last Feritilized:
				@if ( CurrPlant.Feritilized.Count < 1 )
				{
				}
				else
				{
					@CurrPlant.Feritilized.Last().Substring(0,10)
				}
			</div>
			<div>
			Last Cut:
				@if ( CurrPlant.Cutting.Count < 1 )
				{
				}
				else
				{
					@CurrPlant.Cutting.Last().Substring(0,10)
				}
	       </div>
			<div>
				Soil Type: @CurrPlant.SoilType
			</div>
			<div>
		<button class="addBttn" @onclick=@ShowEdit>Edit</button>
				<button class="addBttn" @onclick=@HandleDelete>Delete</button>		
			</div>

	@*<div hidden="@IsEdit"> <EditPlant /> </div>*@

</td>


@code{
	public DateTime date { get; set; }
	[ParameterAttribute]
	public Plant CurrPlant { get; set; }
	[Parameter]
	public EventCallback<Plant> CurrPlantChanged { get; set; }
	protected bool IsShown { get; set; } = true;
	protected bool IsEdit { get; set; } = true;

	protected override async Task OnInitializedAsync ( )
	{
		await CurrPlantChanged.InvokeAsync();
	}

	protected void ShowDetail()
	{
		IsShown = !IsShown;
	}
	protected void ShowEdit ( )
	{
		IsShown = !IsShown;
	}
	public void HandleWater (Plant plant)
	{
		var dateString = date.ToString();
		if ( plant.Watered == null )
		{
			plant.Watered = new List<string>();
		}
		plant.Watered.Add(dateString);
		var context = new PlantDAL();
		context.UpdatePlant(plant);
	}

	public void HandleFeritilize (Plant plant)
	{
		var dateString = date.ToString();
		if ( plant.Feritilized == null )
		{
			plant.Feritilized = new List<string>();
		}
		plant.Feritilized.Add(dateString);
		var context = new PlantDAL();
		context.UpdatePlant(plant);
	}

	public void HandleCutting (Plant plant)
	{
		var dateString = date.ToString();
		if ( plant.Cutting == null )
		{
			plant.Cutting = new List<string>();
		}
		plant.Cutting.Add(dateString);
		var context = new PlantDAL();
		context.UpdatePlant(plant);
	}

	protected void HandleEdit() 
	{
	}
	protected void HandleDelete() 
	{
	}
}